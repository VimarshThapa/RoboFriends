{"version":3,"sources":["components/card.js","components/ErrorBoundary.js","components/cardList.js","components/searchBox.js","components/scroll.js","containers/app.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","height","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,MAbf,YAAkC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAAOC,EAAK,EAALA,GAExB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,6BACI,4BAAKL,GACL,2BAAIC,MCeLK,E,kDArBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,wBAAIN,UAAU,MAAd,iCAGAS,KAAKL,MAAMO,a,GAjBFC,aCkBbC,MAff,YAA+B,IAAXC,EAAU,EAAVA,OACVC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAGnB,GAAIe,EAAOI,GAAGnB,GAC5BF,KAAMiB,EAAOI,GAAGrB,KAChBC,MAAOgB,EAAOI,GAAGpB,WAGzB,OACA,6BACKiB,ICAMK,MAbf,YAAgD,EAA5BC,YAA6B,IAAhBC,EAAe,EAAfA,aAC7B,OACI,yBAAKtB,UAAU,OACX,2BACAA,UAAU,mCACVuB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCPI,MARf,YAA6B,IAAZf,EAAW,EAAXA,SACb,OACI,yBAAKgB,MAAO,CAACC,UAAW,SAAUC,OAAQ,UACrClB,ICiDEmB,G,wDA7CX,aAAe,IAAD,8BACV,gBAiBJC,eAAiB,SAACC,GACd,EAAKtB,SAAS,CAACuB,YAAaD,EAAME,OAAOC,SAjBzC,EAAK9B,MAAQ,CACTS,OAAQ,GACRmB,YAAa,IAJP,E,gEAQO,IAAD,OAChBG,MAAM,8CACLC,MAAK,SAAAC,GACF,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJ,EAAK9B,SAAS,CAACI,OAAQ0B,S,+BAQrB,IAAD,EAC2B/B,KAAKJ,MAA7BS,EADH,EACGA,OAAQmB,EADX,EACWA,YACVQ,EAAiB3B,EAAO4B,QAAO,SAAAC,GACjC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASZ,EAAYW,kBAEzD,OAAqB,IAAlB9B,EAAOgC,OACC,wBAAI9C,UAAU,SAAd,cAIH,yBAAKA,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWsB,aAAcb,KAAKsB,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUjB,OAAQ2B,W,GArC5B7B,cCIEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtD,GACLuD,QAAQvD,MAAMA,EAAMwD,a","file":"static/js/main.743fee2f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Card({name, email, id}) {\r\n\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 ma2 pa3 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React, { Component, component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1 className=\"tc\">Oops! Something went wrong!!!</h1>\r\n        }\r\n        else {\r\n            return this.props.children;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from \"react\";\r\n\r\nimport Card from \"./card\";\r\nimport ErrorBoundary from \"./ErrorBoundary\";\r\n\r\nfunction CardList({ robots }) {\r\n    const cardComponent = robots.map((user, i) => {\r\n        return (\r\n            <Card key={i} id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email} />\r\n        )\r\n    });\r\n    return (\r\n    <div>\r\n        {cardComponent}\r\n  </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nfunction SearchBox({searchField, searchChange}) {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n            className=\"pa3 ba b--green bg-lightest-blue\" \r\n            type=\"search\" \r\n            placeholder='search robots'\r\n            onChange={searchChange} \r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nfunction Scroll({children}) {\r\n    return (\r\n        <div style={{overflowY: 'scroll', height: '500px'}}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from \"../components/cardList\";\r\nimport SearchBox from \"../components/searchBox\";\r\nimport Scroll from \"../components/scroll\";\r\nimport \"./App.css\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => {\r\n            return response.json();\r\n        }).then(users => {\r\n            this.setState({robots: users})\r\n        })\r\n\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n    render() {\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        });\r\n        if(robots.length === 0){\r\n            return <h1 className=\"tc ac\">Loading...</h1>\r\n        }\r\n        else{\r\n            return(\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\">RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./containers/app\";\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n// import { robots } from './robots';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}